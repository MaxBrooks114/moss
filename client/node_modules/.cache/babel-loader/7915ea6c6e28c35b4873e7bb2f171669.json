{"ast":null,"code":"import { resetReviewForm } from './reviewForm';\nimport { getConcerts } from '../concerts/concerts'; // synchronous actions\n\nexport const setReviews = reviews => {\n  return {\n    type: \"SET_REVIEWS\",\n    reviews\n  };\n};\nexport const setUserReviews = reviews => {\n  return {\n    type: \"SET_USER_REVIEWS\",\n    reviews\n  };\n};\nexport const setConcertReviews = reviews => {\n  return {\n    type: \"SET_CONCERT_REVIEWS\",\n    reviews\n  };\n};\nexport const clearReviews = () => {\n  return {\n    type: \"CLEAR_REVIEWS\"\n  };\n};\nexport const addReview = review => {\n  return {\n    type: \"ADD_REVIEW\",\n    review\n  };\n};\nexport const deleteReviewSuccess = reviewId => {\n  return {\n    type: \"DELETE_REVIEW\",\n    reviewId\n  };\n};\nexport const updateReviewSuccess = review => {\n  return {\n    type: \"UPDATE_REVIEW\",\n    review\n  };\n}; // async actions\n\nexport const getReviews = () => {\n  return dispatch => {\n    return fetch(`https://moss-backend.herokuapp.com/api/v1/reviews`, {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(r => r.json()).then(response => {\n      if (response.error) {\n        alert(response.error);\n      } else {\n        dispatch(setReviews(response.data));\n      }\n    }).catch(console.log);\n  };\n};\nexport const getConcertReviews = concertId => {\n  return dispatch => {\n    return fetch(`https://moss-backend.herokuapp.com/api/v1/concerts/${concertId}/reviews`, {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(r => r.json()).then(response => {\n      if (response.error) {\n        alert(response.error);\n      } else {\n        dispatch(setConcertReviews(response.data));\n      }\n    }).catch(console.log);\n  };\n};\nexport const getUserReviews = userId => {\n  return dispatch => {\n    return fetch(`https://moss-backend.herokuapp.com/api/v1/users/${userId}/reviews`, {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(r => r.json()).then(response => {\n      if (response.error) {\n        alert(response.error);\n      } else {\n        dispatch(setUserReviews(response.data));\n      }\n    }).catch(console.log);\n  };\n};\nexport const createReview = (reviewData, history) => {\n  return dispatch => {\n    const sendableReviewData = {\n      venue_score: reviewData.venue_score,\n      sound_score: reviewData.sound_score,\n      performance_score: reviewData.performance_score,\n      set_score: reviewData.set_score,\n      price: reviewData.price,\n      write_up: reviewData.write_up,\n      user_id: reviewData.userId,\n      concert_id: reviewData.concertId\n    };\n    return fetch(\"https://moss-backend.herokuapp.com/api/v1/reviews\", {\n      credentials: \"include\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(sendableReviewData)\n    }).then(r => r.json()).then(resp => {\n      if (resp.error) {\n        alert(resp.error);\n      } else {\n        console.log(resp.data);\n        dispatch(addReview(resp.data));\n        dispatch(getConcerts(resp.data.attributes.concert.artist));\n        dispatch(resetReviewForm());\n        history.push(`/reviews/${resp.data.id}`);\n      }\n    }).catch(console.log);\n  };\n};\nexport const updateReview = (reviewData, history) => {\n  return dispatch => {\n    const sendableReviewData = {\n      venue_score: reviewData.venue_score,\n      sound_score: reviewData.sound_score,\n      performance_score: reviewData.performance_score,\n      set_score: reviewData.set_score,\n      price: reviewData.price,\n      write_up: reviewData.write_up,\n      user_id: reviewData.userId,\n      concert_id: reviewData.concertId\n    };\n    return fetch(`https://moss-backend.herokuapp.com/api/v1/reviews/${reviewData.reviewId}`, {\n      credentials: \"include\",\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(sendableReviewData)\n    }).then(r => r.json()).then(resp => {\n      if (resp.error) {\n        alert(resp.error);\n      } else {\n        dispatch(updateReviewSuccess(resp.data));\n        dispatch(getConcertReviews(resp.data.attributes.concert.id));\n        dispatch(getConcerts(resp.data.attributes.concert.artist));\n        dispatch(resetReviewForm());\n        history.push(`/reviews/${resp.data.id}`);\n      }\n    }).catch(console.log);\n  };\n};\nexport const deleteReview = (reviewId, history, concertId, userId) => {\n  return dispatch => {\n    return fetch(`https://moss-backend.herokuapp.com/api/v1/reviews/${reviewId}`, {\n      credentials: \"include\",\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(r => r.json()).then(resp => {\n      if (resp.error) {\n        alert(resp.error);\n      } else {\n        console.log(resp);\n        dispatch(deleteReviewSuccess(reviewId));\n        dispatch(getUserReviews(userId));\n        dispatch(getConcertReviews(concertId));\n        history.push(`/concerts/${concertId}`);\n      }\n    }).catch(console.log);\n  };\n};","map":{"version":3,"sources":["/Users/maxbrooks/Development/Projects/moss/moss-client/src/actions/reviews/reviews.js"],"names":["resetReviewForm","getConcerts","setReviews","reviews","type","setUserReviews","setConcertReviews","clearReviews","addReview","review","deleteReviewSuccess","reviewId","updateReviewSuccess","getReviews","dispatch","fetch","credentials","method","headers","then","r","json","response","error","alert","data","catch","console","log","getConcertReviews","concertId","getUserReviews","userId","createReview","reviewData","history","sendableReviewData","venue_score","sound_score","performance_score","set_score","price","write_up","user_id","concert_id","body","JSON","stringify","resp","attributes","concert","artist","push","id","updateReview","deleteReview"],"mappings":"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","sourcesContent":["import { resetReviewForm } from './reviewForm'\nimport { getConcerts } from '../concerts/concerts'\n\n// synchronous actions\n\nexport const setReviews = reviews => {\n  return {\n    type: \"SET_REVIEWS\",\n    reviews\n  }\n}\n\n\nexport const setUserReviews = reviews => {\n  return {\n    type: \"SET_USER_REVIEWS\",\n    reviews\n  }\n}\n\nexport const setConcertReviews = reviews => {\n  return {\n    type: \"SET_CONCERT_REVIEWS\",\n    reviews\n  }\n}\n\n\nexport const clearReviews = () => {\n  return {\n    type: \"CLEAR_REVIEWS\"\n  }\n}\n\nexport const addReview = review => {\n  return {\n    type: \"ADD_REVIEW\",\n    review\n  }\n}\n\nexport const deleteReviewSuccess = reviewId => {\n  return {\n    type: \"DELETE_REVIEW\",\n    reviewId\n  }\n}\n\nexport const updateReviewSuccess = review => {\n  return {\n    type: \"UPDATE_REVIEW\",\n    review\n  }\n}\n\n// async actions\n\n\nexport const getReviews = () => {\n  return dispatch => {\n    return fetch(`https://moss-backend.herokuapp.com/api/v1/reviews`, {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n    })\n      .then(r => r.json())\n      .then(response => {\n        if (response.error) {\n          alert(response.error)\n        } else {\n          dispatch(setReviews(response.data))\n        }\n      })\n      .catch(console.log)\n  }\n}\n\nexport const getConcertReviews = (concertId) => {\n  return dispatch => {\n    return fetch(`https://moss-backend.herokuapp.com/api/v1/concerts/${concertId}/reviews`, {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n    })\n      .then(r => r.json())\n      .then(response => {\n        if (response.error) {\n          alert(response.error)\n        } else {\n          dispatch(setConcertReviews(response.data))\n        }\n      })\n      .catch(console.log)\n  }\n}\n\nexport const getUserReviews = (userId) => {\n  return dispatch => {\n    return fetch(`https://moss-backend.herokuapp.com/api/v1/users/${userId}/reviews`, {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n    })\n      .then(r => r.json())\n      .then(response => {\n        if (response.error) {\n          alert(response.error)\n        } else {\n          dispatch(setUserReviews(response.data))\n        }\n      })\n      .catch(console.log)\n  }\n}\n\nexport const createReview = (reviewData, history) => {\n  return dispatch => {\n    const sendableReviewData = {\n      venue_score :reviewData.venue_score,\n      sound_score :reviewData.sound_score,\n      performance_score :reviewData.performance_score,\n      set_score :reviewData.set_score,\n      price :reviewData.price,\n      write_up :reviewData.write_up,\n      user_id :reviewData.userId,\n      concert_id: reviewData.concertId\n    }\n    return fetch(\"https://moss-backend.herokuapp.com/api/v1/reviews\", {\n      credentials: \"include\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(sendableReviewData)\n    })\n      .then(r => r.json())\n      .then(resp => {\n        if (resp.error) {\n          alert(resp.error)\n        } else {\n          console.log(resp.data)\n          dispatch(addReview(resp.data))\n          dispatch(getConcerts(resp.data.attributes.concert.artist))\n          dispatch(resetReviewForm())\n          history.push(`/reviews/${resp.data.id}`)\n\n        }\n      })\n      .catch(console.log)\n\n  }\n}\n\nexport const updateReview = (reviewData, history) => {\n  return dispatch => {\n    const sendableReviewData = {\n      venue_score :reviewData.venue_score,\n      sound_score :reviewData.sound_score,\n      performance_score :reviewData.performance_score,\n      set_score :reviewData.set_score,\n      price :reviewData.price,\n      write_up :reviewData.write_up,\n      user_id :reviewData.userId,\n      concert_id :reviewData.concertId\n    }\n    return fetch(`https://moss-backend.herokuapp.com/api/v1/reviews/${reviewData.reviewId}`, {\n      credentials: \"include\",\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(sendableReviewData)\n    })\n      .then(r => r.json())\n      .then(resp => {\n        if (resp.error) {\n          alert(resp.error)\n        } else {\n          dispatch(updateReviewSuccess(resp.data))\n          dispatch(getConcertReviews(resp.data.attributes.concert.id))\n          dispatch(getConcerts(resp.data.attributes.concert.artist))\n          dispatch(resetReviewForm())\n          history.push(`/reviews/${resp.data.id}`)\n        }\n      })\n      .catch(console.log)\n\n  }\n}\n\nexport const deleteReview = (reviewId, history, concertId, userId) => {\n  return dispatch => {\n    return fetch(`https://moss-backend.herokuapp.com/api/v1/reviews/${reviewId}`, {\n      credentials: \"include\",\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n    })\n      .then(r => r.json())\n      .then(resp => {\n        if (resp.error) {\n          alert(resp.error)\n        } else {\n          console.log(resp)\n          dispatch(deleteReviewSuccess(reviewId))\n          dispatch(getUserReviews(userId))\n          dispatch(getConcertReviews(concertId))\n          history.push(`/concerts/${concertId}`)\n        }\n\n      })\n\n      .catch(console.log)\n\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}