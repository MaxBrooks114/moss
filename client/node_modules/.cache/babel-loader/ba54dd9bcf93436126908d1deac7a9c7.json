{"ast":null,"code":"var _jsxFileName = \"/Users/maxbrooks/Development/code/moss/moss-client/src/components/concerts/ConcertCard.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getConcerts, getConcert } from '../.././actions/concerts/concerts.js';\nimport { getConcertReviews } from '../.././actions/reviews/reviews.js';\nimport { withRouter } from 'react-router-dom';\nimport Card from 'react-bootstrap/Card';\n\nconst ConcertCard = ({\n  concert,\n  currentUserId\n}) => {\n  return concert && concert.attributes ? React.createElement(Card, {\n    key: c.id,\n    className: \"col-md-3\",\n    bg: \"secondary\",\n    text: \"black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Date: \", concert.attributes.date), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Artist: \", concert.attributes.artist), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Venue: \", concert.attributes.venue), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"Aggregated Score: \", concert.attributes.combined_review_score), React.createElement(Link, {\n    to: \"/concerts/\".concat(concert.id, \"/reviews\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \" See all reviews for this concert\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), !!concert.attributes.reviews.find(review => review.user_id == currentUserId) ? React.createElement(Link, {\n    to: \"/reviews/\".concat(concert.attributes.reviews.find(review => review.user_id == currentUserId).id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Your Review\") : React.createElement(Link, {\n    to: \"/concerts/\".concat(concert.id, \"/reviews/new\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \" Add a Review \")) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \" Concert not found \");\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const currentUserId = state.currentUser ? state.currentUser.id : \"\";\n  const concertId = ownProps.match.params.id;\n  return {\n    currentUserId,\n    concertId,\n    concerts: state.concerts,\n    reviews: state.reviews,\n    concert: state.concert\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  getConcerts,\n  getConcertReviews,\n  getConcert\n})(ConcertCard));","map":{"version":3,"sources":["/Users/maxbrooks/Development/code/moss/moss-client/src/components/concerts/ConcertCard.js"],"names":["React","Link","connect","getConcerts","getConcert","getConcertReviews","withRouter","Card","ConcertCard","concert","currentUserId","attributes","c","id","date","artist","venue","combined_review_score","reviews","find","review","user_id","mapStateToProps","state","ownProps","currentUser","concertId","match","params","concerts"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,sCAAxC;AACA,SAASC,iBAAT,QAAkC,oCAAlC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAD,KAA8B;AAE9C,SACED,OAAO,IAAIA,OAAO,CAACE,UAAnB,GACI,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAEC,CAAC,CAACC,EAAb;AAAiB,IAAA,SAAS,EAAC,UAA3B;AAAsC,IAAA,EAAE,EAAC,WAAzC;AAAqD,IAAA,IAAI,EAAC,OAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAUJ,OAAO,CAACE,UAAR,CAAmBG,IAA7B,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYL,OAAO,CAACE,UAAR,CAAmBI,MAA/B,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWN,OAAO,CAACE,UAAR,CAAmBK,KAA9B,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAsBP,OAAO,CAACE,UAAR,CAAmBM,qBAAzC,CAJF,EAKE,oBAAC,IAAD;AAAM,IAAA,EAAE,sBAAgBR,OAAO,CAACI,EAAxB,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCALF,EAKwF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALxF,EAMG,CAAC,CAACJ,OAAO,CAACE,UAAR,CAAmBO,OAAnB,CAA2BC,IAA3B,CAAgCC,MAAM,IAAIA,MAAM,CAACC,OAAP,IAAkBX,aAA5D,CAAF,GAA+E,oBAAC,IAAD;AAAM,IAAA,EAAE,qBAAeD,OAAO,CAACE,UAAR,CAAmBO,OAAnB,CAA2BC,IAA3B,CAAgCC,MAAM,IAAIA,MAAM,CAACC,OAAP,IAAkBX,aAA5D,EAA2EG,EAA1F,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA/E,GAA2M,oBAAC,IAAD;AAAM,IAAA,EAAE,sBAAgBJ,OAAO,CAACI,EAAxB,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAN9M,CADJ,GASM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAVR;AAcC,CAhBL;;AAkBA,MAAMS,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,QAAMd,aAAa,GAAGa,KAAK,CAACE,WAAN,GAAoBF,KAAK,CAACE,WAAN,CAAkBZ,EAAtC,GAA2C,EAAjE;AACA,QAAMa,SAAS,GAAGF,QAAQ,CAACG,KAAT,CAAeC,MAAf,CAAsBf,EAAxC;AACA,SAAQ;AACNH,IAAAA,aADM;AAENgB,IAAAA,SAFM;AAGNG,IAAAA,QAAQ,EAAEN,KAAK,CAACM,QAHV;AAINX,IAAAA,OAAO,EAAEK,KAAK,CAACL,OAJT;AAKNT,IAAAA,OAAO,EAAEc,KAAK,CAACd;AALT,GAAR;AAWD,CAdD;;AAiBA,eAAeH,UAAU,CAACJ,OAAO,CAACoB,eAAD,EAAkB;AAACnB,EAAAA,WAAD;AAAcE,EAAAA,iBAAd;AAAiCD,EAAAA;AAAjC,CAAlB,CAAP,CAAuEI,WAAvE,CAAD,CAAzB","sourcesContent":["import React from 'react'\nimport {Link} from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { getConcerts, getConcert } from '../.././actions/concerts/concerts.js'\nimport { getConcertReviews } from '../.././actions/reviews/reviews.js'\nimport { withRouter } from 'react-router-dom'\nimport Card from 'react-bootstrap/Card'\n\n\nconst ConcertCard = ({concert, currentUserId}) => {\n\n    return (\n      concert && concert.attributes ?\n          <Card key={c.id} className=\"col-md-3\" bg=\"secondary\" text=\"black\">\n            <p>Date: {concert.attributes.date}</p>\n            <p>Artist: {concert.attributes.artist}</p>\n            <p>Venue: {concert.attributes.venue}</p>\n            <p>Aggregated Score: {concert.attributes.combined_review_score}</p>\n            <Link to ={`/concerts/${concert.id}/reviews`}> See all reviews for this concert</Link><br/>\n            {!!concert.attributes.reviews.find(review => review.user_id == currentUserId) ? <Link to ={`/reviews/${concert.attributes.reviews.find(review => review.user_id == currentUserId).id}`}>Your Review</Link> :<Link to ={`/concerts/${concert.id}/reviews/new`}> Add a Review </Link> }\n          </Card>\n          : <div> Concert not found </div>\n\n      )\n\n    }\n\nconst mapStateToProps = (state, ownProps) => {\n  const currentUserId = state.currentUser ? state.currentUser.id : \"\"\n  const concertId = ownProps.match.params.id\n  return ({\n    currentUserId,\n    concertId,\n    concerts: state.concerts,\n    reviews: state.reviews,\n    concert: state.concert,\n\n\n\n\n  })\n}\n\n\nexport default withRouter(connect(mapStateToProps, {getConcerts, getConcertReviews, getConcert})(ConcertCard))\n"]},"metadata":{},"sourceType":"module"}