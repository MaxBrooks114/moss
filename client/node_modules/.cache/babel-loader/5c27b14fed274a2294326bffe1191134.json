{"ast":null,"code":"import _slicedToArray from \"/Users/maxbrooks/Development/code/moss/moss-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/maxbrooks/Development/code/moss/moss-client/src/components/ConcertFetcher.js\";\nimport React, { useState, useEffect } from 'react';\nimport ConcertCard from './ConcertCard';\nimport { getConcert } from '../actions/concerts';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nconst ConcertFetcher = ({\n  getConcert,\n  concertId\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setIsLoading = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        concert = _useState4[0],\n        setConcert = _useState4[1];\n\n  useEffect(() => {\n    async function fetchConcert() {\n      setIsLoading(true);\n      const fetcher = await window.fetch(\"http://localhost:3000/api/v1/concerts/\".concat(concertId), {\n        credentials: \"include\",\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const response = await fetcher.json();\n      setConcert(response);\n      setIsLoading(false);\n    }\n\n    fetchConcert();\n  }, [concertId, getConcert]);\n  return isLoading ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Loading\") : React.createElement(ConcertCard, {\n    concert: concert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  });\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const concertId = ownProps.match.params.id;\n  return {\n    concertId\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  getConcert\n})(ConcertFetcher));","map":{"version":3,"sources":["/Users/maxbrooks/Development/code/moss/moss-client/src/components/ConcertFetcher.js"],"names":["React","useState","useEffect","ConcertCard","getConcert","connect","withRouter","ConcertFetcher","concertId","isLoading","setIsLoading","concert","setConcert","fetchConcert","fetcher","window","fetch","credentials","method","headers","response","json","mapStateToProps","state","ownProps","match","params","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAACH,EAAAA,UAAD;AAAaI,EAAAA;AAAb,CAAD,KAA8B;AAAA,oBACfP,QAAQ,CAAC,KAAD,CADO;AAAA;AAAA,QAC3CQ,SAD2C;AAAA,QAChCC,YADgC;;AAAA,qBAEnBT,QAAQ,CAAC,EAAD,CAFW;AAAA;AAAA,QAE3CU,OAF2C;AAAA,QAElCC,UAFkC;;AAGnDV,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeW,YAAf,GAA6B;AAC7BH,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAMI,OAAO,GAAG,MAAMC,MAAM,CAACC,KAAP,iDAAsDR,SAAtD,GAAmE;AACvFS,QAAAA,WAAW,EAAE,SAD0E;AAEvFC,QAAAA,MAAM,EAAE,KAF+E;AAGvFC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAH8E,OAAnE,CAAtB;AAOA,YAAMC,QAAQ,GAAG,MAAMN,OAAO,CAACO,IAAR,EAAvB;AACAT,MAAAA,UAAU,CAACQ,QAAD,CAAV;AACAV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACC;;AACDG,IAAAA,YAAY;AACb,GAfQ,EAeN,CAACL,SAAD,EAAYJ,UAAZ,CAfM,CAAT;AAgBA,SAAOK,SAAS,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAH,GAAwB,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEE,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxC;AACD,CApBD;;AAuBA,MAAMW,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,QAAMhB,SAAS,GAAGgB,QAAQ,CAACC,KAAT,CAAeC,MAAf,CAAsBC,EAAxC;AACA,SAAQ;AACNnB,IAAAA;AADM,GAAR;AAID,CAND;;AASA,eAAeF,UAAU,CAACD,OAAO,CAACiB,eAAD,EAAkB;AAAClB,EAAAA;AAAD,CAAlB,CAAP,CAAuCG,cAAvC,CAAD,CAAzB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ConcertCard from './ConcertCard'\nimport { getConcert } from '../actions/concerts'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\n\nconst ConcertFetcher = ({getConcert, concertId }) => {\n  const [ isLoading, setIsLoading ] = useState(false)\n  const [ concert, setConcert ] = useState({})\n  useEffect(() => {\n    async function fetchConcert(){\n    setIsLoading(true);\n    const fetcher = await window.fetch(`http://localhost:3000/api/v1/concerts/${concertId}`, {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n    })\n    const response = await fetcher.json()\n    setConcert(response)\n    setIsLoading(false)\n    }\n    fetchConcert()\n  }, [concertId, getConcert])\n  return isLoading ? <div>Loading</div> : <ConcertCard concert={concert} />\n}\n\n\nconst mapStateToProps = (state, ownProps) => {\n  const concertId = ownProps.match.params.id\n  return ({\n    concertId,\n\n  })\n}\n\n\nexport default withRouter(connect(mapStateToProps, {getConcert})(ConcertFetcher))\n"]},"metadata":{},"sourceType":"module"}