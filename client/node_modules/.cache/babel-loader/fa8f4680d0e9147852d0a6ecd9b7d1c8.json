{"ast":null,"code":"var _jsxFileName = \"/Users/maxbrooks/Development/Projects/moss/moss-client/src/components/concerts/ConcertCard.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getConcerts, getConcert } from '../.././actions/concerts/concerts.js';\nimport { getConcertReviews } from '../.././actions/reviews/reviews.js';\nimport { withRouter } from 'react-router-dom';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nconst ConcertCard = ({\n  concert,\n  currentUserId\n}) => {\n  return concert && concert.attributes ? /*#__PURE__*/React.createElement(Card, {\n    className: \"concert-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 15\n    }\n  }, \"Date: \", concert.attributes.date), /*#__PURE__*/React.createElement(Card.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 15\n    }\n  }, \"Artist: \", concert.attributes.artist), /*#__PURE__*/React.createElement(Card.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 15\n    }\n  }, \"Venue: \", concert.attributes.venue), /*#__PURE__*/React.createElement(Card.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 15\n    }\n  }, \"Aggregated Score: \", concert.attributes.combined_review_score), /*#__PURE__*/React.createElement(LinkContainer, {\n    to: `/concerts/${concert.id}/reviews`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }\n  }, \"See all reviews for this concert\")), !!concert.attributes.reviews.find(review => review.user_id == currentUserId) ? /*#__PURE__*/React.createElement(LinkContainer, {\n    to: `/reviews/${concert.attributes.reviews.find(review => review.user_id == currentUserId).id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }, \"Your Review\")) : /*#__PURE__*/React.createElement(LinkContainer, {\n    to: `/concerts/${concert.id}/reviews/new`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 18\n    }\n  }, \"Add a Review\")))) : /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, \" Concert not found \");\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const currentUserId = state.currentUser ? state.currentUser.id : \"\";\n  const concertId = ownProps.match.params.id;\n  return {\n    currentUserId,\n    concertId,\n    concerts: state.concerts,\n    reviews: state.reviews,\n    concert: state.concert\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  getConcerts,\n  getConcertReviews,\n  getConcert\n})(ConcertCard));","map":{"version":3,"sources":["/Users/maxbrooks/Development/Projects/moss/moss-client/src/components/concerts/ConcertCard.js"],"names":["React","Link","connect","getConcerts","getConcert","getConcertReviews","withRouter","Card","Button","LinkContainer","ConcertCard","concert","currentUserId","attributes","date","artist","venue","combined_review_score","id","reviews","find","review","user_id","mapStateToProps","state","ownProps","currentUser","concertId","match","params","concerts"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Link} from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { getConcerts, getConcert } from '../.././actions/concerts/concerts.js'\nimport { getConcertReviews } from '../.././actions/reviews/reviews.js'\nimport { withRouter } from 'react-router-dom'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport { LinkContainer } from 'react-router-bootstrap'\n\n\nconst ConcertCard = ({concert, currentUserId}) => {\n\n    return (\n      concert && concert.attributes ?\n          <Card className = \"concert-card\">\n            <Card.Body>\n              <Card.Text>Date: {concert.attributes.date}</Card.Text>\n              <Card.Text>Artist: {concert.attributes.artist}</Card.Text>\n              <Card.Text>Venue: {concert.attributes.venue}</Card.Text>\n              <Card.Text>Aggregated Score: {concert.attributes.combined_review_score}</Card.Text>\n              <LinkContainer to={`/concerts/${concert.id}/reviews`} >\n                <Button>See all reviews for this concert</Button>\n              </LinkContainer>\n              {!!concert.attributes.reviews.find(review => review.user_id == currentUserId) ?\n                <LinkContainer to ={`/reviews/${concert.attributes.reviews.find(review => review.user_id == currentUserId).id}`}>\n                    <Button>Your Review</Button>\n                </LinkContainer> :\n                <LinkContainer to ={`/concerts/${concert.id}/reviews/new`}>\n                 <Button>Add a Review</Button>\n                </LinkContainer> }\n            </Card.Body>\n          </Card>\n          : <Card> Concert not found </Card>\n\n      )\n\n    }\n\nconst mapStateToProps = (state, ownProps) => {\n  const currentUserId = state.currentUser ? state.currentUser.id : \"\"\n  const concertId = ownProps.match.params.id\n  return ({\n    currentUserId,\n    concertId,\n    concerts: state.concerts,\n    reviews: state.reviews,\n    concert: state.concert,\n\n\n\n\n  })\n}\n\n\nexport default withRouter(connect(mapStateToProps, {getConcerts, getConcertReviews, getConcert})(ConcertCard))\n"]},"metadata":{},"sourceType":"module"}