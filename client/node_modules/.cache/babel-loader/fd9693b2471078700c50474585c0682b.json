{"ast":null,"code":"import axios from 'axios';\nimport store from '../store';\nexport const setConcerts = concerts => {\n  return {\n    type: \"SET_CONCERTS\",\n    concerts\n  };\n};\nexport const setConcert = concert => {\n  return {\n    type: \"SET_CONCERT\",\n    concert\n  };\n};\nexport const clearConcerts = () => {\n  return {\n    type: \"CLEAR_CONCERTS\"\n  };\n};\nconst REACT_APP_BANDSINTOWN_APP_ID = process.env.REACT_APP_BANDSINTOWN_APP_ID;\nexport const getConcerts = artist => {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_CONCERTS'\n    });\n    return axios.get(\"https://rest.bandsintown.com/artists/\".concat(artist, \"/events?app_id=\").concat(REACT_APP_BANDSINTOWN_APP_ID, \"&date=past\")).then(concerts => {\n      dispatch({\n        type: 'GET_CONCERTS',\n        concerts\n      });\n      dispatch({\n        type: 'SET_CONCERTS',\n        concerts\n      });\n      dispatch(addReviewsToConcerts(concerts));\n    }).catch(err => {\n      console.log(err.code);\n      console.log(err.message);\n      console.log(err.stack);\n    });\n  };\n};\nexport const getConcert = concertId => {\n  return dispatch => {\n    return fetch(\"http://localhost:3000/api/v1/concerts/\".concat(concertId), {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(r => r.json()).then(response => {\n      if (response.error) {\n        alert(response.error);\n      } else {\n        console.log(response.data);\n        dispatch(setConcert(response.data));\n      }\n    }).catch(console.log);\n  };\n};\nexport const saveConcert = concertData => {\n  return dispatch => {\n    const sendableConcertData = {\n      venue: concertData.venue.name,\n      artist: concertData.lineup[0],\n      date: concertData.datetime,\n      concert_api_id: parseInt(concertData.id, 10)\n    };\n    return fetch(\"http://localhost:3000/api/v1/concerts\", {\n      credentials: \"include\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(sendableConcertData)\n    }).then(r => r.json()).then(resp => {\n      if (resp.error) {\n        console.log(resp.error);\n      } else {\n        console.log(resp.data);\n        dispatch(getConcert(resp.data.id));\n      }\n    }).catch(console.log);\n  };\n};\nexport const addReviewsToConcerts = concerts => {\n  return (dispatch, getState) => {\n    const reviews = store.getState().reviews;\n    return concerts.data.map(concert => concert.reviews = reviews.filter(review => review.attributes.concert.id == concert.id));\n  };\n};","map":{"version":3,"sources":["/Users/maxbrooks/Development/code/moss/moss-client/src/actions/concerts.js"],"names":["axios","store","setConcerts","concerts","type","setConcert","concert","clearConcerts","REACT_APP_BANDSINTOWN_APP_ID","process","env","getConcerts","artist","dispatch","get","then","addReviewsToConcerts","catch","err","console","log","code","message","stack","getConcert","concertId","fetch","credentials","method","headers","r","json","response","error","alert","data","saveConcert","concertData","sendableConcertData","venue","name","lineup","date","datetime","concert_api_id","parseInt","id","body","JSON","stringify","resp","getState","reviews","map","filter","review","attributes"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,OAAO,MAAMC,WAAW,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLC,IAAAA,IAAI,EAAE,cADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAME,UAAU,GAAGC,OAAO,IAAI;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAE,aADD;AAELE,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,SAAO;AACLH,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAQP,MAAMI,4BAA4B,GAAGC,OAAO,CAACC,GAAR,CAAYF,4BAAjD;AAEA,OAAO,MAAMG,WAAW,GAAIC,MAAD,IAAY;AACjC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAAET,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACA,WAAOJ,KAAK,CAACc,GAAN,gDAAkDF,MAAlD,4BAA0EJ,4BAA1E,iBACJO,IADI,CACCZ,QAAQ,IAAI;AAChBU,MAAAA,QAAQ,CAAC;AAAET,QAAAA,IAAI,EAAE,cAAR;AAAwBD,QAAAA;AAAxB,OAAD,CAAR;AACAU,MAAAA,QAAQ,CAAC;AAAET,QAAAA,IAAI,EAAE,cAAR;AAAwBD,QAAAA;AAAxB,OAAD,CAAR;AACAU,MAAAA,QAAQ,CAACG,oBAAoB,CAACb,QAAD,CAArB,CAAR;AACD,KALI,EAMJc,KANI,CAMGC,GAAG,IAAG;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACI,OAAhB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACK,KAAhB;AACD,KAVI,CAAP;AAYC,GAdH;AAeD,CAhBE;AAkBP,OAAO,MAAMC,UAAU,GAAIC,SAAD,IAAe;AACnC,SAAOZ,QAAQ,IAAI;AACjB,WAAOa,KAAK,iDAA0CD,SAA1C,GAAuD;AACjEE,MAAAA,WAAW,EAAE,SADoD;AAEjEC,MAAAA,MAAM,EAAE,KAFyD;AAGjEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHwD,KAAvD,CAAL,CAOJd,IAPI,CAOCe,CAAC,IAAIA,CAAC,CAACC,IAAF,EAPN,EAQJhB,IARI,CAQCiB,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,KAAb,EAAoB;AAClBC,QAAAA,KAAK,CAACF,QAAQ,CAACC,KAAV,CAAL;AACD,OAFD,MAEO;AACLd,QAAAA,OAAO,CAACC,GAAR,CAAYY,QAAQ,CAACG,IAArB;AACAtB,QAAAA,QAAQ,CAACR,UAAU,CAAC2B,QAAQ,CAACG,IAAV,CAAX,CAAR;AACD;AACF,KAfI,EAgBJlB,KAhBI,CAgBEE,OAAO,CAACC,GAhBV,CAAP;AAiBD,GAlBD;AAmBD,CApBE;AAsBP,OAAO,MAAMgB,WAAW,GAAIC,WAAD,IAAiB;AACxC,SAAOxB,QAAQ,IAAI;AACjB,UAAMyB,mBAAmB,GAAG;AAC1BC,MAAAA,KAAK,EAAEF,WAAW,CAACE,KAAZ,CAAkBC,IADC;AAE1B5B,MAAAA,MAAM,EAAEyB,WAAW,CAACI,MAAZ,CAAmB,CAAnB,CAFkB;AAG1BC,MAAAA,IAAI,EAAEL,WAAW,CAACM,QAHQ;AAI1BC,MAAAA,cAAc,EAAEC,QAAQ,CAACR,WAAW,CAACS,EAAb,EAAiB,EAAjB;AAJE,KAA5B;AAMA,WAAOpB,KAAK,CAAC,uCAAD,EAA0C;AACpDC,MAAAA,WAAW,EAAE,SADuC;AAEpDC,MAAAA,MAAM,EAAE,MAF4C;AAGpDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAH2C;AAMpDkB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,mBAAf;AAN8C,KAA1C,CAAL,CAQJvB,IARI,CAQCe,CAAC,IAAIA,CAAC,CAACC,IAAF,EARN,EASJhB,IATI,CASCmC,IAAI,IAAI;AACZ,UAAIA,IAAI,CAACjB,KAAT,EAAgB;AACdd,QAAAA,OAAO,CAACC,GAAR,CAAY8B,IAAI,CAACjB,KAAjB;AACD,OAFD,MAEO;AACLd,QAAAA,OAAO,CAACC,GAAR,CAAY8B,IAAI,CAACf,IAAjB;AACAtB,QAAAA,QAAQ,CAACW,UAAU,CAAC0B,IAAI,CAACf,IAAL,CAAUW,EAAX,CAAX,CAAR;AAED;AACF,KAjBI,EAkBJ7B,KAlBI,CAkBEE,OAAO,CAACC,GAlBV,CAAP;AAoBD,GA3BD;AA4BD,CA7BI;AAgCP,OAAO,MAAMJ,oBAAoB,GAAIb,QAAD,IAAc;AAChD,SAAO,CAACU,QAAD,EAAWsC,QAAX,KAAwB;AAC7B,UAAMC,OAAO,GAAInD,KAAK,CAACkD,QAAN,GAAiBC,OAAlC;AACA,WAAOjD,QAAQ,CAACgC,IAAT,CAAckB,GAAd,CAAkB/C,OAAO,IAAIA,OAAO,CAAC8C,OAAR,GAAkBA,OAAO,CAACE,MAAR,CAAeC,MAAM,IAAIA,MAAM,CAACC,UAAP,CAAkBlD,OAAlB,CAA0BwC,EAA1B,IAAgCxC,OAAO,CAACwC,EAAjE,CAA/C,CAAP;AACH,GAHC;AAID,CALM","sourcesContent":["import axios from 'axios';\nimport store from '../store';\n\nexport const setConcerts = concerts => {\n  return {\n    type: \"SET_CONCERTS\",\n    concerts\n  }\n}\n\nexport const setConcert = concert => {\n  return {\n    type: \"SET_CONCERT\",\n    concert\n  }\n}\n\nexport const clearConcerts = () => {\n  return {\n    type: \"CLEAR_CONCERTS\"\n  }\n}\n\n\n\nconst REACT_APP_BANDSINTOWN_APP_ID = process.env.REACT_APP_BANDSINTOWN_APP_ID ;\n\nexport const getConcerts = (artist) => {\n      return (dispatch) => {\n        dispatch({ type: 'LOADING_CONCERTS' });\n        return axios.get(`https://rest.bandsintown.com/artists/${artist}/events?app_id=${REACT_APP_BANDSINTOWN_APP_ID}&date=past`)\n          .then(concerts => {\n            dispatch({ type: 'GET_CONCERTS', concerts })\n            dispatch({ type: 'SET_CONCERTS', concerts })\n            dispatch(addReviewsToConcerts(concerts))\n          })\n          .catch( err=> {\n            console.log(err.code)\n            console.log(err.message)\n            console.log(err.stack)\n          }\n          )\n        }\n    }\n\nexport const getConcert = (concertId) => {\n      return dispatch => {\n        return fetch(`http://localhost:3000/api/v1/concerts/${concertId}`, {\n          credentials: \"include\",\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n        })\n          .then(r => r.json())\n          .then(response => {\n            if (response.error) {\n              alert(response.error)\n            } else {\n              console.log(response.data)\n              dispatch(setConcert(response.data))\n            }\n          })\n          .catch(console.log)\n      }\n    }\n\nexport const saveConcert = (concertData) => {\n    return dispatch => {\n      const sendableConcertData = {\n        venue: concertData.venue.name,\n        artist: concertData.lineup[0],\n        date: concertData.datetime,\n        concert_api_id: parseInt(concertData.id, 10)\n      }\n      return fetch(\"http://localhost:3000/api/v1/concerts\", {\n        credentials: \"include\",\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(sendableConcertData)\n      })\n        .then(r => r.json())\n        .then(resp => {\n          if (resp.error) {\n            console.log(resp.error)\n          } else {\n            console.log(resp.data)\n            dispatch(getConcert(resp.data.id))\n\n          }\n        })\n        .catch(console.log)\n\n    }\n  }\n\n\nexport const addReviewsToConcerts = (concerts) => {\n  return (dispatch, getState) => {\n    const reviews  = store.getState().reviews\n    return concerts.data.map(concert => concert.reviews = reviews.filter(review => review.attributes.concert.id == concert.id))\n}\n}\n"]},"metadata":{},"sourceType":"module"}