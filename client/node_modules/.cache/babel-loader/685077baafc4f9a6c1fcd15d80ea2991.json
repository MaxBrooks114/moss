{"ast":null,"code":"var _jsxFileName = \"/Users/maxbrooks/Development/code/moss/moss-client/src/containers/Reviews/ReviewContainer.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReviewCard from '../.././components/reviews/ReviewCard';\nimport { getReviews, getUserReviews, getConcertReviews } from '../.././actions/reviews/reviews';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nconst ReviewContainer = ({\n  getReviews,\n  reviewId,\n  getUserReviews,\n  getConcertReviews,\n  concertId,\n  reviews,\n  currentUserId,\n  userId\n}) => {\n  useEffect(() => {\n    if (concertId) {\n      getConcertReviews(concertId);\n    } else if (userId) {\n      getUserReviews(userId);\n    } else {\n      getReviews();\n    }\n  }, [reviewId, concertId, getConcertReviews, getReviews, getUserReviews, userId]);\n  return React.createElement(ReviewCard, {\n    review: reviews.find(review => review.id === reviewId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  });\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const reviewId = ownProps.match.params.id;\n  const concertId = ownProps.match.path === \"/concerts/:id/reviews\" ? ownProps.match.params.id : null;\n  const userId = ownProps.match.path === \"/users/:id/reviews\" ? ownProps.match.params.id : null;\n  const currentUserId = state.currentUser ? state.currentUser.id : \"\";\n  return {\n    reviews: state.reviews,\n    reviewId,\n    concertId,\n    currentUserId,\n    userId\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  getReviews,\n  getUserReviews,\n  getConcertReviews\n})(ReviewContainer));","map":{"version":3,"sources":["/Users/maxbrooks/Development/code/moss/moss-client/src/containers/Reviews/ReviewContainer.js"],"names":["React","useState","useEffect","ReviewCard","getReviews","getUserReviews","getConcertReviews","connect","withRouter","ReviewContainer","reviewId","concertId","reviews","currentUserId","userId","find","review","id","mapStateToProps","state","ownProps","match","params","path","currentUser"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,iBAArC,QAA8D,iCAA9D;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAACL,EAAAA,UAAD;AAAaM,EAAAA,QAAb;AAAuBL,EAAAA,cAAvB;AAAuCC,EAAAA,iBAAvC;AAA0DK,EAAAA,SAA1D;AAAqEC,EAAAA,OAArE;AAA8EC,EAAAA,aAA9E;AAA6FC,EAAAA;AAA7F,CAAD,KAA0G;AAChIZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,SAAJ,EAAc;AACZL,MAAAA,iBAAiB,CAACK,SAAD,CAAjB;AACD,KAFD,MAEO,IAAIG,MAAJ,EAAY;AACjBT,MAAAA,cAAc,CAACS,MAAD,CAAd;AACD,KAFM,MAEA;AACLV,MAAAA,UAAU;AACX;AACF,GARM,EAQJ,CAACM,QAAD,EAAWC,SAAX,EAAsBL,iBAAtB,EAAyCF,UAAzC,EAAqDC,cAArD,EAAqES,MAArE,CARI,CAAT;AASA,SAAO,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEF,OAAO,CAACG,IAAR,CAAaC,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAcP,QAArC,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAXD;;AAcA,MAAMQ,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,QAAMV,QAAQ,GAAGU,QAAQ,CAACC,KAAT,CAAeC,MAAf,CAAsBL,EAAvC;AACA,QAAMN,SAAS,GAAGS,QAAQ,CAACC,KAAT,CAAeE,IAAf,KAAwB,uBAAxB,GAAkDH,QAAQ,CAACC,KAAT,CAAeC,MAAf,CAAsBL,EAAxE,GAA6E,IAA/F;AACA,QAAMH,MAAM,GAAGM,QAAQ,CAACC,KAAT,CAAeE,IAAf,KAAwB,oBAAxB,GAA+CH,QAAQ,CAACC,KAAT,CAAeC,MAAf,CAAsBL,EAArE,GAA0E,IAAzF;AACA,QAAMJ,aAAa,GAAGM,KAAK,CAACK,WAAN,GAAoBL,KAAK,CAACK,WAAN,CAAkBP,EAAtC,GAA2C,EAAjE;AACA,SAAQ;AACNL,IAAAA,OAAO,EAAGO,KAAK,CAACP,OADV;AAENF,IAAAA,QAFM;AAGNC,IAAAA,SAHM;AAINE,IAAAA,aAJM;AAKNC,IAAAA;AALM,GAAR;AAOD,CAZD;;AAeA,eAAeN,UAAU,CAACD,OAAO,CAACW,eAAD,EAAkB;AAACd,EAAAA,UAAD;AAAaC,EAAAA,cAAb;AAA6BC,EAAAA;AAA7B,CAAlB,CAAP,CAA0EG,eAA1E,CAAD,CAAzB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ReviewCard from '../.././components/reviews/ReviewCard'\nimport { getReviews, getUserReviews, getConcertReviews } from '../.././actions/reviews/reviews'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\n\nconst ReviewContainer = ({getReviews, reviewId, getUserReviews, getConcertReviews, concertId, reviews, currentUserId, userId}) => {\n  useEffect(() => {\n      if (concertId){\n        getConcertReviews(concertId)\n      } else if (userId) {\n        getUserReviews(userId)\n      } else {\n        getReviews()\n      }\n    }, [reviewId, concertId, getConcertReviews, getReviews, getUserReviews, userId])\n  return <ReviewCard review={reviews.find(review => review.id === reviewId)} />\n}\n\n\nconst mapStateToProps = (state, ownProps) => {\n  const reviewId = ownProps.match.params.id\n  const concertId = ownProps.match.path === \"/concerts/:id/reviews\" ? ownProps.match.params.id : null\n  const userId = ownProps.match.path === \"/users/:id/reviews\" ? ownProps.match.params.id : null\n  const currentUserId = state.currentUser ? state.currentUser.id : \"\"\n  return ({\n    reviews : state.reviews,\n    reviewId,\n    concertId,\n    currentUserId,\n    userId\n  })\n}\n\n\nexport default withRouter(connect(mapStateToProps, {getReviews, getUserReviews, getConcertReviews})(ReviewContainer))\n"]},"metadata":{},"sourceType":"module"}