{"ast":null,"code":"var _jsxFileName = \"/Users/maxbrooks/Development/code/moss/moss-client/src/components/CurrentUserConcerts.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nconst CurrentUserConcerts = props => {\n  const concertCards = props.concerts.length > 0 ? props.concerts.map(c => React.createElement(Link, {\n    key: c.id,\n    to: \"/concerts/\".concat(c.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, c.attributes.name)) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \" This array is empty yall \");\n  return concertCards;\n};\n\nconst mapStateToProps = state => {\n  return {\n    concerts: state.currentUserConcerts\n  };\n};\n\nexport default connect(mapStateToProps)(CurrentUserConcerts);","map":{"version":3,"sources":["/Users/maxbrooks/Development/code/moss/moss-client/src/components/CurrentUserConcerts.js"],"names":["React","connect","Link","CurrentUserConcerts","props","concertCards","concerts","length","map","c","id","attributes","name","mapStateToProps","state","currentUserConcerts"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAGA,MAAMC,mBAAmB,GAAGC,KAAK,IAAI;AACnC,QAAMC,YAAY,GAAGD,KAAK,CAACE,QAAN,CAAeC,MAAf,GAAwB,CAAxB,GACnBH,KAAK,CAACE,QAAN,CAAeE,GAAf,CAAmBC,CAAC,IAAI,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAEA,CAAC,CAACC,EAAb;AAAiB,IAAA,EAAE,sBAAeD,CAAC,CAACC,EAAjB,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2CD,CAAC,CAACE,UAAF,CAAaC,IAAxD,CAAxB,CADmB,GAC+E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADpG;AAGA,SAAOP,YAAP;AACD,CALD;;AASA,MAAMQ,eAAe,GAAGC,KAAK,IAAI;AACjC,SAAO;AACHR,IAAAA,QAAQ,EAAEQ,KAAK,CAACC;AADb,GAAP;AAIC,CALD;;AAOA,eAAed,OAAO,CAACY,eAAD,CAAP,CAAyBV,mBAAzB,CAAf","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\n\nconst CurrentUserConcerts = props => {\n  const concertCards = props.concerts.length > 0 ?\n    props.concerts.map(c => <Link key={c.id} to={`/concerts/${c.id}`}>{c.attributes.name}</Link> )  : <p> This array is empty yall </p>\n\n  return concertCards\n}\n\n\n\nconst mapStateToProps = state => {\nreturn {\n    concerts: state.currentUserConcerts\n\n  }\n}\n\nexport default connect(mapStateToProps)(CurrentUserConcerts)\n"]},"metadata":{},"sourceType":"module"}