{"ast":null,"code":"import _slicedToArray from \"/Users/maxbrooks/Development/code/moss/moss-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/maxbrooks/Development/code/moss/moss-client/src/components/Reviews.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReviewsList from './ReviewsList';\nimport { getReviews, getConcertReviews, getUserReviews } from '../actions/reviews';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nconst Reviews = ({\n  getReviews,\n  getConcertReviews,\n  concertId,\n  currentUserId,\n  userId\n}) => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        reviews = _useState2[0],\n        setReviews = _useState2[1];\n\n  useEffect(() => {\n    if (concertId) {\n      getConcertReviews(concertId);\n    } else if (userId) {\n      getUserReviews(userId);\n    } else {\n      getReviews();\n    }\n  }, [concertId, getConcertReviews, getReviews, userId]);\n  return React.createElement(ReviewsList, {\n    reviews: reviews,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  });\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const concertId = ownProps.match.path === \"/concerts/:id/reviews\" ? ownProps.match.params.id : \"null\";\n  const userId = ownProps.match.path === \"/users/:id/reviews\" ? ownProps.match.params.id : null;\n  const currentUserId = state.currentUser ? state.currentUser.id : \"\";\n  return {\n    concertId,\n    currentUserId // userId\n\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  getReviews,\n  getUserReviews,\n  getConcertReviews\n})(Reviews));","map":{"version":3,"sources":["/Users/maxbrooks/Development/code/moss/moss-client/src/components/Reviews.js"],"names":["React","useState","useEffect","ReviewsList","getReviews","getConcertReviews","getUserReviews","connect","withRouter","Reviews","concertId","currentUserId","userId","reviews","setReviews","mapStateToProps","state","ownProps","match","path","params","id","currentUser"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,UAAT,EAAqBC,iBAArB,EAAwCC,cAAxC,QAA8D,oBAA9D;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAACL,EAAAA,UAAD;AAAaC,EAAAA,iBAAb;AAAgCK,EAAAA,SAAhC;AAA2CC,EAAAA,aAA3C;AAA0DC,EAAAA;AAA1D,CAAD,KAAuE;AAAA,oBACrDX,QAAQ,CAAC,EAAD,CAD6C;AAAA;AAAA,QAC7EY,OAD6E;AAAA,QACpEC,UADoE;;AAErFZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIQ,SAAJ,EAAc;AACZL,MAAAA,iBAAiB,CAACK,SAAD,CAAjB;AACD,KAFD,MAEO,IAAIE,MAAJ,EAAY;AACjBN,MAAAA,cAAc,CAACM,MAAD,CAAd;AACD,KAFM,MAEA;AACLR,MAAAA,UAAU;AACX;AACF,GARM,EAQJ,CAACM,SAAD,EAAYL,iBAAZ,EAA+BD,UAA/B,EAA2CQ,MAA3C,CARI,CAAT;AASE,SAAO,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACH,CAZD;;AAeA,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,QAAMP,SAAS,GAAGO,QAAQ,CAACC,KAAT,CAAeC,IAAf,KAAwB,uBAAxB,GAAkDF,QAAQ,CAACC,KAAT,CAAeE,MAAf,CAAsBC,EAAxE,GAA6E,MAA/F;AACA,QAAMT,MAAM,GAAGK,QAAQ,CAACC,KAAT,CAAeC,IAAf,KAAwB,oBAAxB,GAA+CF,QAAQ,CAACC,KAAT,CAAeE,MAAf,CAAsBC,EAArE,GAA0E,IAAzF;AACA,QAAMV,aAAa,GAAGK,KAAK,CAACM,WAAN,GAAoBN,KAAK,CAACM,WAAN,CAAkBD,EAAtC,GAA2C,EAAjE;AACA,SAAQ;AACNX,IAAAA,SADM;AAENC,IAAAA,aAFM,CAGN;;AAHM,GAAR;AAKD,CATD;;AAYA,eAAeH,UAAU,CAACD,OAAO,CAACQ,eAAD,EAAkB;AAACX,EAAAA,UAAD;AAAYE,EAAAA,cAAZ;AAA2BD,EAAAA;AAA3B,CAAlB,CAAP,CAAwEI,OAAxE,CAAD,CAAzB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ReviewsList from './ReviewsList'\nimport { getReviews, getConcertReviews, getUserReviews } from '../actions/reviews'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\n\nconst Reviews = ({getReviews, getConcertReviews, concertId, currentUserId, userId}) => {\n  const [ reviews, setReviews ] = useState({})\n  useEffect(() => {\n      if (concertId){\n        getConcertReviews(concertId)\n      } else if (userId) {\n        getUserReviews(userId)\n      } else {\n        getReviews()\n      }\n    }, [concertId, getConcertReviews, getReviews, userId])\n    return <ReviewsList reviews={reviews} />\n}\n\n\nconst mapStateToProps = (state, ownProps) => {\n  const concertId = ownProps.match.path === \"/concerts/:id/reviews\" ? ownProps.match.params.id : \"null\"\n  const userId = ownProps.match.path === \"/users/:id/reviews\" ? ownProps.match.params.id : null\n  const currentUserId = state.currentUser ? state.currentUser.id : \"\"\n  return ({\n    concertId,\n    currentUserId,\n    // userId\n  })\n}\n\n\nexport default withRouter(connect(mapStateToProps, {getReviews,getUserReviews,getConcertReviews})(Reviews))\n"]},"metadata":{},"sourceType":"module"}