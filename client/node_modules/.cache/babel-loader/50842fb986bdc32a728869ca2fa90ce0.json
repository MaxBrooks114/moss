{"ast":null,"code":"import { resetReviewForm } from './reviewForm';\nimport { getConcerts, addReviewsToConcerts } from './concerts'; // synchronous actions\n\nexport const setReviews = reviews => {\n  return {\n    type: \"SET_REVIEWS\",\n    reviews\n  };\n};\nexport const setUserReviews = reviews => {\n  return {\n    type: \"SET_USER_REVIEWS\",\n    reviews\n  };\n};\nexport const setConcertReviews = reviews => {\n  return {\n    type: \"SET_CONCERT_REVIEWS\",\n    reviews\n  };\n};\nexport const clearReviews = () => {\n  return {\n    type: \"CLEAR_REVIEWS\"\n  };\n};\nexport const addReview = review => {\n  return {\n    type: \"ADD_REVIEW\",\n    review\n  };\n};\nexport const deleteReviewSuccess = reviewId => {\n  return {\n    type: \"DELETE_REVIEW\",\n    reviewId\n  };\n};\nexport const updateReviewSuccess = review => {\n  return {\n    type: \"UPDATE_REVIEW\",\n    review\n  };\n}; // async actions\n\nexport const getReviews = () => {\n  return dispatch => {\n    return fetch(\"http://localhost:3000/api/v1/reviews\", {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(r => r.json()).then(response => {\n      if (response.error) {\n        alert(response.error);\n      } else {\n        dispatch(setReviews(response.data));\n      }\n    }).catch(console.log);\n  };\n};\nexport const getConcertReviews = concert => {\n  return dispatch => {\n    return fetch(\"http://localhost:3000/api/v1/concerts/\".concat(concert.id, \"/reviews\"), {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(r => r.json()).then(response => {\n      if (response.error) {\n        alert(response.error);\n      } else {\n        dispatch(setConcertReviews(response.data));\n      }\n    }).catch(console.log);\n  };\n};\nexport const getUserReviews = user => {\n  return dispatch => {\n    return fetch(\"http://localhost:3000/api/v1/users/\".concat(user.id, \"/reviews\"), {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(r => r.json()).then(response => {\n      if (response.error) {\n        alert(response.error);\n      } else {\n        dispatch(setUserReviews(response.data));\n      }\n    }).catch(console.log);\n  };\n};\nexport const createReview = (reviewData, history) => {\n  return dispatch => {\n    const sendableReviewData = {\n      venue_score: reviewData.venue_score,\n      sound_score: reviewData.sound_score,\n      performance_score: reviewData.performance_score,\n      set_score: reviewData.set_score,\n      price: reviewData.price,\n      write_up: reviewData.write_up,\n      user_id: reviewData.userId,\n      concert_id: reviewData.concertId\n    };\n    return fetch(\"http://localhost:3000/api/v1/reviews\", {\n      credentials: \"include\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(sendableReviewData)\n    }).then(r => r.json()).then(resp => {\n      if (resp.error) {\n        alert(resp.error);\n      } else {\n        console.log(resp.data);\n        dispatch(addReview(resp.data)); // dispatch(getUserReviews(resp.data.attributes.user))\n\n        dispatch(getConcerts(resp.data.attributes.concert.artist));\n        dispatch(resetReviewForm());\n        history.push(\"/reviews/\".concat(resp.data.id));\n      }\n    }).catch(console.log);\n  };\n};\nexport const updateReview = (reviewData, history) => {\n  return dispatch => {\n    const sendableReviewData = {\n      venue_score: reviewData.venue_score,\n      sound_score: reviewData.sound_score,\n      performance_score: reviewData.performance_score,\n      set_score: reviewData.set_score,\n      price: reviewData.price,\n      write_up: reviewData.write_up,\n      user_id: reviewData.userId,\n      concert_id: reviewData.concertId\n    };\n    return fetch(\"http://localhost:3000/api/v1/reviews/\".concat(reviewData.reviewId), {\n      credentials: \"include\",\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(sendableReviewData)\n    }).then(r => r.json()).then(resp => {\n      if (resp.error) {\n        alert(resp.error);\n      } else {\n        dispatch(updateReviewSuccess(resp.data));\n        dispatch(getConcertReviews(resp.data.attributes.concert));\n        dispatch(getConcerts(resp.data.attributes.concert.artist));\n        dispatch(resetReviewForm());\n        history.push(\"/reviews/\".concat(resp.data.id));\n      }\n    }).catch(console.log);\n  };\n};\nexport const deleteReview = (reviewId, history, concertId, userId) => {\n  return dispatch => {\n    return fetch(\"http://localhost:3000/api/v1/reviews/\".concat(reviewId), {\n      credentials: \"include\",\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(r => r.json()).then(resp => {\n      if (resp.error) {\n        alert(resp.error);\n      } else {\n        console.log(resp);\n        dispatch(deleteReviewSuccess(reviewId));\n        dispatch(getUserReviews(userId));\n        dispatch(getConcertReviews(concertId));\n        history.push(\"/concerts/\".concat(concertId));\n      }\n    }).catch(console.log);\n  };\n};","map":{"version":3,"sources":["/Users/maxbrooks/Development/code/moss/moss-client/src/actions/reviews.js"],"names":["resetReviewForm","getConcerts","addReviewsToConcerts","setReviews","reviews","type","setUserReviews","setConcertReviews","clearReviews","addReview","review","deleteReviewSuccess","reviewId","updateReviewSuccess","getReviews","dispatch","fetch","credentials","method","headers","then","r","json","response","error","alert","data","catch","console","log","getConcertReviews","concert","id","getUserReviews","user","createReview","reviewData","history","sendableReviewData","venue_score","sound_score","performance_score","set_score","price","write_up","user_id","userId","concert_id","concertId","body","JSON","stringify","resp","attributes","artist","push","updateReview","deleteReview"],"mappings":"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","sourcesContent":["import { resetReviewForm } from './reviewForm'\nimport { getConcerts, addReviewsToConcerts } from './concerts'\n\n// synchronous actions\n\nexport const setReviews = reviews => {\n  return {\n    type: \"SET_REVIEWS\",\n    reviews\n  }\n}\n\n\nexport const setUserReviews = reviews => {\n  return {\n    type: \"SET_USER_REVIEWS\",\n    reviews\n  }\n}\n\nexport const setConcertReviews = reviews => {\n  return {\n    type: \"SET_CONCERT_REVIEWS\",\n    reviews\n  }\n}\n\n\nexport const clearReviews = () => {\n  return {\n    type: \"CLEAR_REVIEWS\"\n  }\n}\n\nexport const addReview = review => {\n  return {\n    type: \"ADD_REVIEW\",\n    review\n  }\n}\n\nexport const deleteReviewSuccess = reviewId => {\n  return {\n    type: \"DELETE_REVIEW\",\n    reviewId\n  }\n}\n\nexport const updateReviewSuccess = review => {\n  return {\n    type: \"UPDATE_REVIEW\",\n    review\n  }\n}\n\n// async actions\n\n\nexport const getReviews = () => {\n  return dispatch => {\n    return fetch(`http://localhost:3000/api/v1/reviews`, {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n    })\n      .then(r => r.json())\n      .then(response => {\n        if (response.error) {\n          alert(response.error)\n        } else {\n          dispatch(setReviews(response.data))\n        }\n      })\n      .catch(console.log)\n  }\n}\n\nexport const getConcertReviews = (concert) => {\n  return dispatch => {\n    return fetch(`http://localhost:3000/api/v1/concerts/${concert.id}/reviews`, {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n    })\n      .then(r => r.json())\n      .then(response => {\n        if (response.error) {\n          alert(response.error)\n        } else {\n          dispatch(setConcertReviews(response.data))\n        }\n      })\n      .catch(console.log)\n  }\n}\n\nexport const getUserReviews = (user) => {\n  return dispatch => {\n    return fetch(`http://localhost:3000/api/v1/users/${user.id}/reviews`, {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n    })\n      .then(r => r.json())\n      .then(response => {\n        if (response.error) {\n          alert(response.error)\n        } else {\n          dispatch(setUserReviews(response.data))\n        }\n      })\n      .catch(console.log)\n  }\n}\n\nexport const createReview = (reviewData, history) => {\n  return dispatch => {\n    const sendableReviewData = {\n      venue_score :reviewData.venue_score,\n      sound_score :reviewData.sound_score,\n      performance_score :reviewData.performance_score,\n      set_score :reviewData.set_score,\n      price :reviewData.price,\n      write_up :reviewData.write_up,\n      user_id :reviewData.userId,\n      concert_id: reviewData.concertId\n    }\n    return fetch(\"http://localhost:3000/api/v1/reviews\", {\n      credentials: \"include\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(sendableReviewData)\n    })\n      .then(r => r.json())\n      .then(resp => {\n        if (resp.error) {\n          alert(resp.error)\n        } else {\n          console.log(resp.data)\n          dispatch(addReview(resp.data))\n          // dispatch(getUserReviews(resp.data.attributes.user))\n          dispatch(getConcerts(resp.data.attributes.concert.artist))\n\n          dispatch(resetReviewForm())\n          history.push(`/reviews/${resp.data.id}`)\n\n        }\n      })\n      .catch(console.log)\n\n  }\n}\n\nexport const updateReview = (reviewData, history) => {\n  return dispatch => {\n    const sendableReviewData = {\n      venue_score :reviewData.venue_score,\n      sound_score :reviewData.sound_score,\n      performance_score :reviewData.performance_score,\n      set_score :reviewData.set_score,\n      price :reviewData.price,\n      write_up :reviewData.write_up,\n      user_id :reviewData.userId,\n      concert_id :reviewData.concertId\n    }\n    return fetch(`http://localhost:3000/api/v1/reviews/${reviewData.reviewId}`, {\n      credentials: \"include\",\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(sendableReviewData)\n    })\n      .then(r => r.json())\n      .then(resp => {\n        if (resp.error) {\n          alert(resp.error)\n        } else {\n          dispatch(updateReviewSuccess(resp.data))\n          dispatch(getConcertReviews(resp.data.attributes.concert))\n          dispatch(getConcerts(resp.data.attributes.concert.artist))\n          dispatch(resetReviewForm())\n          history.push(`/reviews/${resp.data.id}`)\n        }\n      })\n      .catch(console.log)\n\n  }\n}\n\nexport const deleteReview = (reviewId, history, concertId, userId) => {\n  return dispatch => {\n    return fetch(`http://localhost:3000/api/v1/reviews/${reviewId}`, {\n      credentials: \"include\",\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n    })\n      .then(r => r.json())\n      .then(resp => {\n        if (resp.error) {\n          alert(resp.error)\n        } else {\n          console.log(resp)\n          dispatch(deleteReviewSuccess(reviewId))\n          dispatch(getUserReviews(userId))\n          dispatch(getConcertReviews(concertId))\n          history.push(`/concerts/${concertId}`)\n        }\n\n      })\n\n      .catch(console.log)\n\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}