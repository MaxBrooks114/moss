{"ast":null,"code":"import _slicedToArray from \"/Users/maxbrooks/Development/code/moss/moss-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/maxbrooks/Development/code/moss/moss-client/src/containers/Reviews/Reviews.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReviewsList from '../.././components/reviews/ReviewsList';\nimport { getReviews, getConcertReviews, getUserReviews } from '../.././actions/reviews/reviews';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\n\nconst Reviews = ({\n  getReviews,\n  getUserReviews,\n  getConcertReviews,\n  concertId,\n  currentUserId,\n  userId\n}) => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 1),\n        reviews = _useState2[0];\n\n  useEffect(() => {\n    if (concertId) {\n      getConcertReviews(concertId);\n    } else if (userId) {\n      getUserReviews(userId);\n    } else {\n      getReviews();\n    }\n  }, [concertId, getConcertReviews, getReviews, getUserReviews, userId]);\n  return React.createElement(Container, {\n    className: \"reviews-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(ReviewsList, {\n    reviews: reviews,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const concertId = ownProps.match.path === \"/concerts/:id/reviews\" ? ownProps.match.params.id : null;\n  const userId = ownProps.match.path === \"/users/:id/reviews\" ? ownProps.match.params.id : null;\n  const currentUserId = state.currentUser ? state.currentUser.id : \"\";\n  return {\n    concertId,\n    currentUserId,\n    userId\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  getReviews,\n  getUserReviews,\n  getConcertReviews\n})(Reviews));","map":{"version":3,"sources":["/Users/maxbrooks/Development/code/moss/moss-client/src/containers/Reviews/Reviews.js"],"names":["React","useState","useEffect","ReviewsList","getReviews","getConcertReviews","getUserReviews","connect","withRouter","Container","Reviews","concertId","currentUserId","userId","reviews","mapStateToProps","state","ownProps","match","path","params","id","currentUser"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,wCAAxB;AACA,SAASC,UAAT,EAAqBC,iBAArB,EAAwCC,cAAxC,QAA8D,iCAA9D;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,2BAAtB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAACN,EAAAA,UAAD;AAAaE,EAAAA,cAAb;AAA6BD,EAAAA,iBAA7B;AAAgDM,EAAAA,SAAhD;AAA2DC,EAAAA,aAA3D;AAA0EC,EAAAA;AAA1E,CAAD,KAAuF;AAAA,oBACjFZ,QAAQ,CAAC,EAAD,CADyE;AAAA;AAAA,QAC7Fa,OAD6F;;AAErGZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,SAAJ,EAAc;AACZN,MAAAA,iBAAiB,CAACM,SAAD,CAAjB;AACD,KAFD,MAEO,IAAIE,MAAJ,EAAY;AACjBP,MAAAA,cAAc,CAACO,MAAD,CAAd;AACD,KAFM,MAEA;AACLT,MAAAA,UAAU;AACX;AACF,GARM,EAQJ,CAACO,SAAD,EAAYN,iBAAZ,EAA+BD,UAA/B,EAA2CE,cAA3C,EAA2DO,MAA3D,CARI,CAAT;AASE,SACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,mBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKH,CAhBD;;AAmBA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,QAAMN,SAAS,GAAGM,QAAQ,CAACC,KAAT,CAAeC,IAAf,KAAwB,uBAAxB,GAAkDF,QAAQ,CAACC,KAAT,CAAeE,MAAf,CAAsBC,EAAxE,GAA6E,IAA/F;AACA,QAAMR,MAAM,GAAGI,QAAQ,CAACC,KAAT,CAAeC,IAAf,KAAwB,oBAAxB,GAA+CF,QAAQ,CAACC,KAAT,CAAeE,MAAf,CAAsBC,EAArE,GAA0E,IAAzF;AACA,QAAMT,aAAa,GAAGI,KAAK,CAACM,WAAN,GAAoBN,KAAK,CAACM,WAAN,CAAkBD,EAAtC,GAA2C,EAAjE;AACA,SAAQ;AACNV,IAAAA,SADM;AAENC,IAAAA,aAFM;AAGNC,IAAAA;AAHM,GAAR;AAKD,CATD;;AAYA,eAAeL,UAAU,CAACD,OAAO,CAACQ,eAAD,EAAkB;AAACX,EAAAA,UAAD;AAAYE,EAAAA,cAAZ;AAA2BD,EAAAA;AAA3B,CAAlB,CAAP,CAAwEK,OAAxE,CAAD,CAAzB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ReviewsList from '../.././components/reviews/ReviewsList'\nimport { getReviews, getConcertReviews, getUserReviews } from '../.././actions/reviews/reviews'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport Container from 'react-bootstrap/Container'\n\nconst Reviews = ({getReviews, getUserReviews, getConcertReviews, concertId, currentUserId, userId}) => {\n  const [ reviews ] = useState({})\n  useEffect(() => {\n      if (concertId){\n        getConcertReviews(concertId)\n      } else if (userId) {\n        getUserReviews(userId)\n      } else {\n        getReviews()\n      }\n    }, [concertId, getConcertReviews, getReviews, getUserReviews, userId])\n    return (\n      <Container className=\"reviews-container\">\n        <ReviewsList reviews={reviews} />\n      </Container>\n    )\n}\n\n\nconst mapStateToProps = (state, ownProps) => {\n  const concertId = ownProps.match.path === \"/concerts/:id/reviews\" ? ownProps.match.params.id : null\n  const userId = ownProps.match.path === \"/users/:id/reviews\" ? ownProps.match.params.id : null\n  const currentUserId = state.currentUser ? state.currentUser.id : \"\"\n  return ({\n    concertId,\n    currentUserId,\n    userId\n  })\n}\n\n\nexport default withRouter(connect(mapStateToProps, {getReviews,getUserReviews,getConcertReviews})(Reviews))\n"]},"metadata":{},"sourceType":"module"}